buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'de.thetaphi:forbiddenapis:3.9'
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
    // https://github.com/SgtSilvio/gradle-maven-central-publishing
    id 'io.github.sgtsilvio.gradle.maven-central-publishing' version '0.4.0'
    id 'io.codearte.nexus-staging' version '0.30.0'

    // https://gradle-pitest-plugin.solidsoft.info/
    id 'info.solidsoft.pitest' version '1.15.0'

    // https://plugins.gradle.org/plugin/org.openrewrite.rewrite
    id 'org.openrewrite.rewrite' version '7.8.0'
}

apply plugin: 'de.thetaphi.forbiddenapis'
apply plugin: 'jacoco'
// too chatty apply plugin: 'checkstyle'
apply plugin: 'codenarc'
// does not observe excludes: apply plugin: 'findbugs'
// did not provide useful warnings: apply plugin: 'pmd'
// not used currently: apply plugin: 'jdepend'
apply plugin: 'signing'

java {
  toolchain {
	  sourceCompatibility = JavaVersion.VERSION_17
  }
}

group = 'org.dstadler'
base {
    archivesName = 'commons-dost'
}

repositories {
    mavenCentral()
}

forbiddenApis {
    suppressAnnotations = ['org.dstadler.commons.util.SuppressForbidden']
    bundledSignatures = [ 'jdk-reflection', 'commons-io-unsafe-2.18.0', 'jdk-internal' ]
    signaturesFiles += files('config/forbidden-apis/http-signatures.txt')
}

forbiddenApisMain {
    // 'jdk-unsafe', 'jdk-system-out'
    bundledSignatures += [ 'jdk-deprecated', 'jdk-internal', 'jdk-non-portable' ]
    signaturesFiles += files('config/forbidden-apis/forbidden.signatures.txt')
}

dependencies {
    implementation 'commons-io:commons-io:2.19.0'
    implementation 'org.apache.commons:commons-lang3:3.17.0'
    implementation 'org.apache.commons:commons-text:1.13.1'
    implementation 'org.apache.httpcomponents:httpclient:4.5.14'
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.5'
    implementation 'org.apache.httpcomponents:httpasyncclient:4.1.5'
    implementation 'org.apache.commons:commons-exec:1.5.0'
    implementation 'org.apache.logging.log4j:log4j-api:2.25.0'
    implementation 'net.java.dev.jna:jna:3.4.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.13.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.13.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.13.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.13.1'
    testImplementation 'org.dstadler:commons-test:1.0.0.22'
    testImplementation 'org.apache.logging.log4j:log4j-core:2.25.0'

    // https://github.com/openrewrite/rewrite-testing-frameworks
    rewrite 'org.openrewrite.recipe:rewrite-testing-frameworks:3.10.0'
    // https://github.com/openrewrite/rewrite-migrate-java
    rewrite 'org.openrewrite.recipe:rewrite-migrate-java:3.11.0'
    // https://github.com/openrewrite/rewrite-apache
    // does not fully work: rewrite 'org.openrewrite.recipe:rewrite-apache:2.10.3'
}

wrapper {
    gradleVersion = '8.14.2'
}

test {
    // required for LoggerFactoryTest to succeed on JDK 17
    jvmArgs = ['--add-opens', 'java.logging/java.util.logging=ALL-UNNAMED']

    maxHeapSize = "64m"
    systemProperties = System.properties

    // enable to show standard out and standard error of the test JVM(s) on the console
    // testLogging.showStandardStreams = true

    // http://forums.gradle.org/gradle/topics/jacoco_related_failure_in_multiproject_build
    systemProperties['user.dir'] = workingDir

    // avoid failures because Gradle provides it's own version of JNA in the system properties
    systemProperties['jna.boot.library.path'] = null

    useJUnitPlatform()
}

test.dependsOn jar

jacoco {
    toolVersion = '0.8.13'
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

tasks.register('sourcesJar', Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allJava
}

tasks.register('javadocJar', Jar) {
    archiveClassifier = 'javadoc'
    from javadoc
}

tasks.withType(Jar).configureEach { task ->
    task.doLast {
        ant.checksum algorithm: 'md5', file: it.archivePath
        ant.checksum algorithm: 'sha1', file: it.archivePath
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

rewrite {
    // Reformats Java Code
    //activeRecipe('org.openrewrite.java.format.AutoFormat')
    // Java 8 to Java 11
    activeRecipe('org.openrewrite.java.migrate.Java8toJava11')
    activeRecipe('org.openrewrite.java.migrate.UpgradeToJava17')
    // Imports
    //activeRecipe('org.openrewrite.java.OrderImports')
    // https://docs.openrewrite.org/recipes/java/testing/junit5/junit4to5migration
    activeRecipe("org.openrewrite.java.testing.junit5.JUnit4to5Migration")
    // https://docs.openrewrite.org/recipes/apache/httpclient5/upgradeapachehttpclient_5
    // does not fully work: activeRecipe("org.openrewrite.apache.httpclient5.UpgradeApacheHttpClient_5")
    setExportDatatables(true)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'commons-dost'
            from components.java

            pom {
                name = 'Common Utilities'
                description = 'Common utilities I find useful in many of my projects.'
                url = 'https://github.com/centic9/commons-dost'
                licenses {
                    license {
                        name = 'BSD 2-Clause "Simplified" License'
                        url = 'https://github.com/centic9/commons-dost/blob/master/LICENSE.md'
                    }
                }
                developers {
                    developer {
                        id = 'centic9'
                        name = 'Dominik Stadler'
                    }
                }
                scm {
                    connection = 'scm:git@github.com:centic9/commons-dost'
                    developerConnection = 'scm:git@github.com:centic9/commons-dost'
                    url = 'https://github.com/centic9/commons-dost'
                }
            }
        }
    }
    repositories {
        maven {
            // change to point to your repo, e.g. http://my.org/repo
            //url = layout.buildDirectory.dir('repo')
            url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials(PasswordCredentials)
            //snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/')
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}
