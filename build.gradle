buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'de.thetaphi:forbiddenapis:3.1'
	}
}

plugins {
    // https://github.com/researchgate/gradle-release
    id 'net.researchgate.release' version '2.8.1'
    id 'io.codearte.nexus-staging' version '0.22.0'
}

apply plugin: 'java'
apply plugin: 'de.thetaphi.forbiddenapis'
apply plugin: 'jacoco'
// too chatty apply plugin: 'checkstyle'
apply plugin: 'codenarc'
// does not observe excludes: apply plugin: 'findbugs'
// did not provide useful warnings: apply plugin: 'pmd'
// not used currently: apply plugin: 'jdepend'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'io.codearte.nexus-staging'

sourceCompatibility = 1.8
group = 'org.dstadler'
archivesBaseName = 'commons-dost'

repositories {
	mavenCentral()
}

forbiddenApis {
	suppressAnnotations = ['org.dstadler.commons.util.SuppressForbidden']
	bundledSignatures = [ 'jdk-reflection', 'commons-io-unsafe-2.8.0', 'jdk-internal' ]
	signaturesFiles += files('config/forbidden-apis/http-signatures.txt')
}

forbiddenApisMain {
	// 'jdk-unsafe', 'jdk-system-out'
	bundledSignatures += [ 'jdk-deprecated', 'jdk-internal', 'jdk-non-portable' ]
	signaturesFiles += files('config/forbidden-apis/forbidden.signatures.txt')
}

dependencies {
	compile 'commons-io:commons-io:2.8.0'
	compile 'org.apache.commons:commons-lang3:3.12.0'
	compile 'org.apache.commons:commons-text:1.9'
	compile 'org.apache.httpcomponents:httpclient:4.5.13'
	compile 'org.apache.httpcomponents:httpasyncclient:4.1.4'
	compile 'org.apache.commons:commons-exec:1.3'
	compile 'log4j:log4j:1.2.17'
	compile 'net.java.dev.jna:jna:3.4.0'

	testCompile 'junit:junit:4.13.2'
	testCompile 'org.dstadler:commons-test:1.0.0.19'
}

wrapper {
    gradleVersion = '6.6.1'
}

task adjustWrapperPropertiesFile {
    doLast {
        ant.replaceregexp(match: '^#.*', replace: '', flags: 'g', byline: true) {
            fileset(dir: project.projectDir, includes: 'gradle/wrapper/gradle-wrapper.properties')
        }
        new File(project.projectDir, 'gradle/wrapper/gradle-wrapper.properties').with {
            it.text = it.readLines().findAll { it }.sort().join('\n')
        }
        ant.fixcrlf(file: 'gradle/wrapper/gradle-wrapper.properties', eol: 'lf')
    }
}
wrapper.finalizedBy adjustWrapperPropertiesFile

test {
	maxHeapSize = "32m"
	systemProperties = System.properties

	// enable to show standard out and standard error of the test JVM(s) on the console
	// testLogging.showStandardStreams = true

	// http://forums.gradle.org/gradle/topics/jacoco_related_failure_in_multiproject_build
	systemProperties['user.dir'] = workingDir

    // avoid failures because Gradle provides it's own version of JNA in the system properties
    systemProperties['jna.boot.library.path'] = null
}

jacoco {
    toolVersion = '0.8.6'
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

//provide defaults so we do not need to specify them always
if (!project.hasProperty('ossrhUsername')) {
    ext.ossrhUsername = ''
}
if (!project.hasProperty('ossrhPassword')) {
    ext.ossrhPassword = ''
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      pom.project {
        name 'Common Utilities'
        packaging 'jar'
        // optionally artifactId can be defined here
        description 'Common utilities I find useful in many of my projects.'
        url 'https://github.com/centic9/commons-dost'

        scm {
          connection 'scm:git@github.com:centic9/commons-dost.git'
          developerConnection 'scm:git@github.com:centic9/commons-dost.git'
          url 'https://github.com/centic9/commons-dost'
        }

        licenses {
          license {
            name 'BSD 2-Clause License'
            url 'https://www.opensource.org/licenses/bsd-license.php'
          }
        }

        developers {
          developer {
            id 'centic9	'
            name 'Dominik Stadler'
          }
        }
      }
    }
  }
}

afterReleaseBuild.dependsOn uploadArchives
